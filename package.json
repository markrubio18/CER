{
  "name": "nextjs_tailwind_shadcn_ts",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "PORT=3000 next dev",
    "dev:custom": "PORT=3000 nodemon --exec \"npx tsx server.ts\" --watch server.ts --watch src --ext ts,tsx,js,jsx 2>&1 | tee dev.log",
    "dev:debug": "PORT=3000 NODE_ENV=development DEBUG=* nodemon --exec \"npx tsx server.ts\" --watch server.ts --watch src --ext ts,tsx,js,jsx",
    "build": "next build",
    "start": "PORT=3000 NODE_ENV=production tsx start.js 2>&1 | tee server.log",
    "start:next": "PORT=3000 NODE_ENV=production next start",
    "start:debug": "PORT=3000 NODE_ENV=production DEBUG=* tsx server.ts",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "setup": "node -e \"const fs = require('fs'); const path = require('path'); if (!fs.existsSync('.env')) { fs.copyFileSync('env.sqlite', '.env'); console.log('SQLite environment file created!'); } else { console.log('Environment file already exists'); } if (!fs.existsSync('db')) { fs.mkdirSync('db'); console.log('Database directory created!'); } console.log('Setup complete! Please edit .env file and run: npm run db:push');",
    "setup:postgresql": "node -e \"const fs = require('fs'); if (!fs.existsSync('.env')) { fs.copyFileSync('env.postgresql', '.env'); console.log('PostgreSQL environment file created!'); } else { console.log('Environment file already exists'); } console.log('PostgreSQL setup complete! Please edit .env file and run: npm run db:push:postgresql');",
    "setup:sqlite": "node -e \"const fs = require('fs'); if (!fs.existsSync('.env')) { fs.copyFileSync('env.sqlite', '.env'); console.log('SQLite environment file created!'); } else { console.log('Environment file already exists'); } if (!fs.existsSync('db')) { fs.mkdirSync('db'); console.log('Database directory created!'); } console.log('SQLite setup complete! Please edit .env file and run: npm run db:push:sqlite');",
    "db:push": "prisma db push",
    "db:push:postgresql": "cp prisma/schema.prisma prisma/schema.prisma.backup && cp prisma/schema.prisma.psql prisma/schema.prisma && prisma db push && cp prisma/schema.prisma.backup prisma/schema.prisma",
    "db:push:sqlite": "cp prisma/schema.prisma prisma/schema.prisma.backup && cp prisma/schema.sqlite prisma/schema.prisma && prisma db push && cp prisma/schema.prisma.backup prisma/schema.prisma",
    "db:generate": "prisma generate",
    "db:migrate": "prisma migrate dev",
    "db:reset": "prisma migrate reset",
    "db:studio": "prisma studio",
    "db:studio:postgresql": "cp prisma/schema.prisma prisma/schema.prisma.backup && cp prisma/schema.prisma.psql prisma/schema.prisma && prisma studio && cp prisma/schema.prisma.backup prisma/schema.prisma",
    "db:studio:sqlite": "cp prisma/schema.prisma prisma/schema.prisma.backup && cp prisma/schema.sqlite prisma/schema.prisma && prisma studio && cp prisma/schema.prisma.backup prisma/schema.prisma",
    "migrate:webhook": "node scripts/migrate-webhook-schema.js",
    "migrate:webhook:sqlite": "cp prisma/schema.prisma prisma/schema.prisma.backup && cp prisma/schema.sqlite prisma/schema.prisma && node scripts/migrate-webhook-schema.js && cp prisma/schema.prisma.backup prisma/schema.prisma",
    "migrate:webhook:postgresql": "cp prisma/schema.prisma prisma/schema.prisma.backup && cp prisma/schema.prisma.psql prisma/schema.prisma && node scripts/migrate-webhook-schema.js && cp prisma/schema.prisma.backup prisma/schema.prisma",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:ci": "dotenv -e .env.test -- npx prisma db push && jest --ci --coverage --watchAll=false",
    "test:debug": "node --inspect-brk node_modules/.bin/jest --runInBand",
    "test:update": "jest --updateSnapshot",
    "test:verbose": "jest --verbose",
    "test:e2e": "playwright test",
    "docker:build": "docker build -t ca-management .",
    "docker:run": "docker run -p 3000:3000 --env-file env.docker ca-management",
    "docker:compose": "docker compose up --build",
    "docker:compose:down": "docker compose down",
    "docker:compose:logs": "docker compose logs -f",
    "clean": "rm -rf .next node_modules/.cache",
    "clean:all": "rm -rf .next node_modules/.cache db/*.db logs/*.log"
  },
  "prisma": {
    "schema": "prisma/schema.prisma"
  },
  "dependencies": {
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dnd-kit/utilities": "^3.2.2",
    "@hookform/resolvers": "^5.1.1",
    "@mdxeditor/editor": "^3.39.1",
    "@prisma/client": "^6.14.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@reactuses/core": "^6.0.5",
    "@tanstack/react-query": "^5.82.0",
    "@tanstack/react-table": "^8.21.3",
    "@testing-library/user-event": "^14.6.1",
    "@types/bcryptjs": "^2.4.6",
    "@types/styled-components": "^5.1.34",
    "asn1js": "^3.0.6",
    "axios": "^1.10.0",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^4.1.0",
    "embla-carousel-react": "^8.6.0",
    "framer-motion": "^12.23.2",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.525.0",
    "next": "14.2.3",
    "next-auth": "^4.24.11",
    "next-intl": "^4.3.4",
    "next-themes": "^0.4.6",
    "node-forge": "^1.3.1",
    "pkijs": "^3.2.5",
    "prisma": "^6.14.0",
    "react": "18.2.0",
    "react-day-picker": "^9.8.0",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.60.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^3.0.3",
    "react-syntax-highlighter": "^15.6.1",
    "recharts": "^2.15.4",
    "sharp": "^0.34.3",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "sonner": "^2.0.6",
    "styled-components": "^6.1.19",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.20.3",
    "uuid": "^11.1.0",
    "vaul": "^1.1.2",
    "z-ai-web-dev-sdk": "^0.0.10",
    "zod": "^4.0.2",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@playwright/test": "^1.55.0",
    "@tailwindcss/postcss": "^4",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/jest": "^30.0.0",
    "@types/node": "^20",
    "@types/node-forge": "^1.3.13",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "dotenv": "^17.2.1",
    "dotenv-cli": "^10.0.0",
    "eslint": "^9",
    "eslint-config-next": "15.3.5",
    "jest": "^30.0.5",
    "jest-environment-jsdom": "^30.0.5",
    "next": "15.3.5",
    "nodemon": "^3.1.10",
    "tailwindcss": "^4",
    "ts-jest": "^29.4.1",
    "tw-animate-css": "^1.3.5",
    "typescript": "5.9.2"
  }
}
