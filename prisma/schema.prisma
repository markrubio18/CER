// This is your Prisma schema file for the Certificate Authority Management Application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Management with Role-Based Access Control
enum UserRole {
  ADMIN
  OPERATOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id        String      @id @default(cuid())
  username  String      @unique
  email     String      @unique
  name      String?
  password  String      // Hashed password
  role      UserRole    @default(VIEWER)
  status    UserStatus  @default(ACTIVE)
  lastLogin DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  auditLogs      AuditLog[]
  certificates   Certificate[]
  revocations    CertificateRevocation[]

  @@map("users")
}

// CA Configuration
enum CAStatus {
  INITIALIZING
  ACTIVE
  EXPIRED
  REVOKED
}

model CAConfig {
  id                  String    @id @default(cuid())
  name                String?
  subjectDN           String    // Distinguished Name for the CA
  privateKey          String    // Encrypted private key
  certificate         String?   // Signed CA certificate (PEM format)
  certificateChain    String?   // PEM bundle of intermediates up to (optionally) root
  csr                 String?   // Generated CSR
  keyAlgorithm        String    @default("RSA") // RSA, ECDSA, Ed25519
  keySize             Int?      // For RSA: 2048, 3072, 4096
  curve               String?   // For ECDSA: P-256, P-384, P-521
  status              CAStatus  @default(INITIALIZING)
  validFrom           DateTime?
  validTo             DateTime?
  crlNumber           Int       @default(0)
  crlDistributionPoint String?
  ocspUrl            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  certificates        Certificate[]
  crls                CRL[]

  @@map("ca_configs")
}

// Certificate Management
enum CertificateType {
  SERVER
  CLIENT
  CA
}

enum CertificateStatus {
  PENDING
  ACTIVE
  EXPIRED
  REVOKED
}

enum KeyAlgorithm {
  RSA
  ECDSA
  Ed25519
}

model Certificate {
  id               String            @id @default(cuid())
  serialNumber     String            @unique
  subjectDN        String
  issuerDN         String
  certificate      String            // PEM format
  privateKey       String?           // Encrypted private key (if generated by CA)
  csr              String?           // Original CSR
  type             CertificateType
  status           CertificateStatus @default(PENDING)
  keyAlgorithm     KeyAlgorithm
  keySize          Int?
  curve            String?
  validFrom        DateTime
  validTo          DateTime
  sans             String?           // JSON array of Subject Alternative Names
  fingerprint      String?
  issuedById       String?           // User who issued the certificate
  caId             String?           // Issuing CA
  revokedAt        DateTime?
  revocationReason String?
  lastValidated    DateTime?         // When certificate was last validated
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  issuedBy   User?                 @relation(fields: [issuedById], references: [id])
  revocation CertificateRevocation?
  ca         CAConfig?             @relation(fields: [caId], references: [id])

  @@map("certificates")
}

// Certificate Revocation List
enum RevocationReason {
  UNSPECIFIED
  KEY_COMPROMISE
  CA_COMPROMISE
  AFFILIATION_CHANGED
  SUPERSEDED
  CESSATION_OF_OPERATION
  CERTIFICATE_HOLD
  REMOVE_FROM_CRL
  PRIVILEGE_WITHDRAWN
  AA_COMPROMISE
}

model CertificateRevocation {
  id               String            @id @default(cuid())
  certificateId    String            @unique
  serialNumber     String
  revocationDate   DateTime          @default(now())
  revocationReason RevocationReason  @default(UNSPECIFIED)
  invalidityDate   DateTime?
  revokedById      String            // User who revoked the certificate
  createdAt        DateTime          @default(now())

  // Relations
  certificate Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
  revokedBy  User        @relation(fields: [revokedById], references: [id])

  @@map("certificate_revocations")
}

// CRL (Certificate Revocation List)
model CRL {
  id          String   @id @default(cuid())
  crlNumber   Int
  crlData     String   // PEM format CRL
  issuedAt    DateTime @default(now())
  nextUpdate  DateTime
  createdAt   DateTime @default(now())

  // Relations
  caId        String?
  ca          CAConfig? @relation(fields: [caId], references: [id])

  @@map("crls")
}

// Audit Logging
enum AuditAction {
  LOGIN
  LOGOUT
  CA_CSR_GENERATED
  CA_CERTIFICATE_UPLOADED
  CA_DELETED
  CERTIFICATE_ISSUED
  CERTIFICATE_RENEWED
  CERTIFICATE_REVOKED
  CERTIFICATE_VALIDATED
  CERTIFICATE_VALIDATION_ERROR
  CRL_GENERATED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  CONFIG_UPDATED
  EXPORT_PERFORMED
}

model AuditLog {
  id          String       @id @default(cuid())
  action      AuditAction
  userId      String?
  username    String?
  ipAddress   String?
  userAgent   String?
  description String
  metadata    String?      // JSON format for additional data
  createdAt   DateTime     @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Notification Settings
enum NotificationType {
  EMAIL
  WEBHOOK
}

enum NotificationEvent {
  CERTIFICATE_EXPIRY
  CA_EXPIRY
  CRL_UPDATE
  SECURITY_ALERT
}

model NotificationSetting {
  id           String            @id @default(cuid())
  type         NotificationType
  event        NotificationEvent
  recipient    String            // Email address or webhook URL
  enabled      Boolean           @default(true)
  daysBefore   Int               @default(30) // For expiry notifications
  
  // Webhook-specific configuration
  webhookConfig Json?            // { timeout, retries, retryDelay, headers, secret }
  
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  webhookDeliveries WebhookDelivery[]

  @@map("notification_settings")
}

// Notification History
model NotificationHistory {
  id           String            @id @default(cuid())
  type         NotificationType
  event        NotificationEvent
  recipient    String
  subject      String?
  message      String
  status       String            // sent, failed, pending
  sentAt       DateTime?
  createdAt    DateTime          @default(now())

  @@map("notification_history")
}

// Webhook Delivery Tracking
model WebhookDelivery {
  id           String            @id @default(cuid())
  webhookId    String            // Reference to notification setting
  url          String
  event        NotificationEvent
  payload      Json              // Full webhook payload
  status       String            // pending, sent, failed, retrying
  statusCode   Int?
  responseTime Int?              // Response time in milliseconds
  error        String?
  retries      Int               @default(0)
  maxRetries   Int               @default(3)
  createdAt    DateTime          @default(now())
  sentAt       DateTime?
  nextRetryAt  DateTime?

  // Relations
  notificationSetting NotificationSetting? @relation(fields: [webhookId], references: [id])

  @@map("webhook_deliveries")
}

// System Configuration
model SystemConfig {
  id                   String   @id @default(cuid())
  key                  String   @unique
  value                String
  description          String?
  isEncrypted          Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("system_configs")
}
