version: '3.8'

services:
  ca-management:
    build: .
    ports:
      - "3000:3000"
    env_file:
      - env.docker
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    # Simplified startup command for debugging
    command: >
      sh -c "
        echo '🔍 DEBUG MODE: Starting application...' &&
        echo '📁 Current directory: ' && pwd &&
        echo '📁 Directory contents: ' && ls -la &&
        echo '🔧 Environment variables: ' &&
        echo '  NODE_ENV: $NODE_ENV' &&
        echo '  PORT: $PORT' &&
        echo '  DATABASE_URL: $DATABASE_URL' &&
        echo '  LOG_LEVEL: $LOG_LEVEL' &&
        echo '⏳ Waiting for PostgreSQL...' &&
        until pg_isready -h postgres -U $POSTGRES_USER -d $POSTGRES_DB; do
          echo 'PostgreSQL is unavailable - sleeping' &&
          sleep 2
        done &&
        echo '✅ PostgreSQL is ready!' &&
        echo '🔧 Setting up database...' &&
        cp prisma/schema.prisma.psql prisma/schema.prisma &&
        npx prisma generate &&
        npx prisma db push &&
        echo '✅ Database setup complete!' &&
        echo '🚀 Starting server...' &&
        echo '📝 Log level: $LOG_LEVEL' &&
        echo '📝 Log format: $LOG_FORMAT' &&
        echo '📝 Log file: $LOG_FILE' &&
        npx tsx server.ts
      "
    environment:
      - PORT=3000
      - NODE_ENV=production
      - LOG_LEVEL=debug
      - LOG_FORMAT=text
      - LOG_FILE=/app/logs/app.log

  postgres:
    image: postgres:14-alpine
    env_file:
      - env.docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  logs:
    driver: local